<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppServiceContent1" xml:space="preserve">
    <value>services.Add{0}&lt;{1}&gt;();</value>
    <comment>服务注册文件内容</comment>
  </data>
  <data name="AppServiceContent2" xml:space="preserve">
    <value>services.Add{0}&lt;{1}, {2}&gt;();</value>
    <comment>服务注册文件内容</comment>
  </data>
  <data name="AppServiceFooter" xml:space="preserve">
    <value>}
}</value>
    <comment>服务注册文件尾</comment>
  </data>
  <data name="AppServiceHeader" xml:space="preserve">
    <value>using Microsoft.Extensions.DependencyInjection;

namespace XinjingdailyBot.WebAPI.Extensions;

/// &lt;summary&gt;
/// 动态注册服务扩展
/// &lt;/summary&gt;
public static class GeneratedAppServiceExtensions
{
    private static readonly NLog.Logger _logger = NLog.LogManager.GetCurrentClassLogger();

    /// &lt;summary&gt;
    /// 注册引用程序域中所有有AppService标记的类的服务
    /// &lt;/summary&gt;
    /// &lt;param name="services"&gt;&lt;/param&gt;
    public static void AddAppServiceGenerated(this IServiceCollection services)
    {</value>
    <comment>服务注册文件头</comment>
  </data>
  <data name="DbTableContent" xml:space="preserve">
    <value>_logger.LogInformation("开始创建 {0} 表");
_dbClient.CodeFirst.InitTables&lt;{1}&gt;();</value>
    <comment>数据库文件内容</comment>
  </data>
  <data name="DbTableFooter" xml:space="preserve">
    <value>_logger.LogWarning("数据库结构生成完毕, 建议禁用 Database.Generate 来加快启动速度");
        }

        return Task.CompletedTask;
    }

    /// &lt;summary&gt;
    /// 销毁
    /// &lt;/summary&gt;
    public override void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}</value>
    <comment>数据库文件尾</comment>
  </data>
  <data name="DbTableHeader" xml:space="preserve">
    <value>using Microsoft.Extensions.Options;
using SqlSugar;
using XinjingdailyBot.Infrastructure;

namespace XinjingdailyBot.WebAPI.Extensions;

/// &lt;summary&gt;
/// 消息接收服务
/// &lt;/summary&gt;
public sealed class GeneratedDbInitService(
        ILogger&lt;GeneratedDbInitService&gt; _logger,
        IOptions&lt;OptionsSetting&gt; _options,
        ISqlSugarClient _dbClient) : BackgroundService
{
    /// &lt;summary&gt;
    /// 执行
    /// &lt;/summary&gt;
    /// &lt;param name="cancellationToken"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    protected override Task ExecuteAsync(CancellationToken cancellationToken)
    {
        var dbCotion = _options.Value.Database;
        if (dbCotion.Generate)
        {
            _logger.LogInformation("开始生成数据库结构");
            //创建数据库
            try
            {
                _dbClient.DbMaintenance.CreateDatabase(dbCotion.DbName);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "创建数据库失败, 可能没有权限");
            }

            //创建数据表</value>
    <comment>数据库文件头</comment>
  </data>
  <data name="ScheduleContent" xml:space="preserve">
    <value>qz.RegisterNewJob&lt;{2}&gt;("{0}", "{1}", cron);</value>
    <comment>定时任务文件内容</comment>
  </data>
  <data name="ScheduleFooter" xml:space="preserve">
    <value>});

        services.AddQuartzServer(op =&gt; {
            op.StartDelay = TimeSpan.FromSeconds(10);
            op.AwaitApplicationStarted = true;
            op.WaitForJobsToComplete = true;
        });
    }

    private const string DefaultGroupName = "DEFAULT";

    /// &lt;summary&gt;
    /// 注册定时任务
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
    /// &lt;param name="qz"&gt;&lt;/param&gt;
    /// &lt;param name="jobName"&gt;&lt;/param&gt;
    /// &lt;param name="defSchedule"&gt;&lt;/param&gt;
    /// &lt;param name="cron"&gt;&lt;/param&gt;
    private static void RegisterNewJob&lt;T&gt;(this IServiceCollectionQuartzConfigurator qz, string jobName, string defSchedule, Dictionary&lt;string, string&gt; cron) where T : IJob
    {
        var jobKey = new JobKey(jobName, DefaultGroupName);
        var tiggerKey = new TriggerKey($"{jobName}-Tigger", DefaultGroupName);
        var schedule = cron.GetValueOrDefault(jobName, defSchedule);

        try
        {
            qz.AddJob&lt;T&gt;(jobKey, opts =&gt; opts.WithIdentity(jobKey));
            qz.AddTrigger(opts =&gt; opts
                .ForJob(jobKey)
                .WithIdentity(tiggerKey)
                .WithCronSchedule(schedule)
            );

            _logger.Debug("[{cron}] - {name} 注册成功", schedule, jobName);
        }
        catch (Exception ex)
        {
            _logger.Error(ex, "[{cron}] - {name} 注册失败", schedule, jobName);
        }
    }
}</value>
    <comment>定时任务文件尾</comment>
  </data>
  <data name="ScheduleHeader" xml:space="preserve">
    <value>using Quartz;
using Quartz.AspNetCore;
using XinjingdailyBot.Infrastructure;

namespace XinjingdailyBot.WebAPI.Extensions;

/// &lt;summary&gt;
/// 定时任务扩展
/// &lt;/summary&gt;
public static class GeneratedTaskExtensions
{    
    private static readonly NLog.Logger _logger = NLog.LogManager.GetCurrentClassLogger();

    /// &lt;summary&gt;
    /// 注册定时任务
    /// &lt;/summary&gt;
    /// &lt;param name="services"&gt;&lt;/param&gt;
    /// &lt;param name="configuration"&gt;&lt;/param&gt;
    public static void AddQuartzSetupGenerated(this IServiceCollection services, IConfiguration configuration)
    {
        var scheduleConfig = configuration.GetSection("Schedule").Get&lt;OptionsSetting.ScheduleOption&gt;();
        var cron = scheduleConfig?.Cron ?? [];

        services.Configure&lt;QuartzOptions&gt;(options =&gt; {
            options.Scheduling.IgnoreDuplicates = true;
            options.Scheduling.OverWriteExistingData = true;
        });

        services.AddQuartz(qz =&gt; {
            _logger.Debug("===== 注册定时任务 =====");</value>
    <comment>定时任务文件头</comment>
  </data>
</root>